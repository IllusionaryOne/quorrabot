<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2015 www.quorrabot.com

Credits: gloriouseggroll, gmt2001, PhantomIndex, GloriousEggroll
gloriouseggroll@gmail.com, phantomindex@gmail.com

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-->

<project name="QuorraBot" basedir="." default="dist">

    <property environment="env" />
    <property name="project.base.dir" value="." />
    <property name="version" value="1.14" />
    <property name="java.class.path" value="" />
    <property name="src" value="${project.base.dir}/src" />
    <property name="reference" value="${project.base.dir}/lib" />
    <property name="build" value="${project.base.dir}/build" />
    <property name="classes" value="${build}/classes" />
    <property name="dist" value="${project.base.dir}/dist" />
    <property name="versionfolder" value="${dist}/${ant.project.name}-${version}" />
    <property name="version.name" value="${ant.project.name}-${version}" />
    <property name="build.dir" value="${dist}/build" />
    <property name="res.dir" value="${build.dir}" />
    <property name="lib.dir" value="${build.dir}/lib" />
    
    <tstamp>
        <format property="NOW" pattern="MMM dd yyyy HH:mm:ss zzz" timezone="America/New_York" />
    </tstamp>
    
    <path id="classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar" />
    </path>

    <path id="reference.class.path">
        <fileset dir="${reference}">
            <include name="*.jar" />
        </fileset>
    </path>
    
    <condition property="nightly_build" value="${nightly}" else="not_nightly">
        <and>
            <isset property="nightly" />
            <length string="${nightly}" trim="yes" length="0" when="greater" />
        </and>
    </condition>
    
    <available file=".git" type="dir" property="git.present"/>

    <target name="init">
        <mkdir dir="${build}" />
        <mkdir dir="${classes}" />
        <mkdir dir="${dist}" />
        <mkdir dir="${versionfolder}" />

        <pathconvert property="mf.classpath" pathsep=" ">
            <path refid="reference.class.path" />
            <mapper>
                <chainedmapper>
                    <flattenmapper/>
                    <globmapper from="*.jar" to="lib/*.jar" />
                </chainedmapper>
            </mapper>
        </pathconvert>
    </target>

    <target name="git.revision" if="git.present">
        <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
            <arg value="rev-parse"/>
            <arg value="--short"/>
            <arg value="HEAD"/>
        </exec>
        <condition property="repository.version" value="${git.revision}" else="unknown">
            <and>
                <isset property="git.revision"/>
                <length string="${git.revision}" trim="yes" length="0" when="greater"/>
            </and>
        </condition>
    </target>

    <target depends="init,git.revision" name="pre.compile">
        <echo>${ant.project.name} Version ${version} (${repository.version}) (${nightly_build})</echo>
        <replaceregexp
            file="${src}/me/gloriouseggroll/quorrabot/RepoVersion.java"
            match="repoVersion = &quot;(.*)&quot;;"
            replace="repoVersion = &quot;${repository.version}&quot;;" />
        <replaceregexp
            file="${src}/me/gloriouseggroll/quorrabot/RepoVersion.java"
            match="nightlyBuild = &quot;(.*)&quot;;"
            replace="nightlyBuild = &quot;${nightly_build}&quot;;" />
        <replaceregexp
            file="${src}/me/gloriouseggroll/quorrabot/RepoVersion.java"
            match="quorraBotVersion = &quot;(.*)&quot;;"
            replace="quorraBotVersion = &quot;${version} ${NOW}&quot;;" />
    </target>

    <target depends="pre.compile" name="compile.src">
        <javac target="1.7" source="1.7" debug="on" destdir="${classes}" srcdir="${src}" includeantruntime="false" >
            <compilerarg value="-Xlint:unchecked" />
            <compilerarg value="-Xlint:-options" />
            <classpath refid="reference.class.path" />
        </javac>
    </target>
    
    <target depends="pre.compile" name="clean.build.test">
        <delete dir="${build}" />
        <mkdir dir="${build}" />
        <mkdir dir="${classes}" />
    </target>
    
    <target depends="clean.build.test" name="compile.src.test">
        <javac target="1.7" source="1.7" debug="on" destdir="${classes}" srcdir="${src}" includeantruntime="false" >
            <compilerarg value="-Xlint:all" />
            <compilerarg value="-Xlint:-options" />
            <classpath refid="reference.class.path" />
        </javac>
    </target>
    
    <target name="post.compile">
        <replaceregexp
            file="${src}/me/gloriouseggroll/quorrabot/RepoVersion.java"
            match="repoVersion = &quot;(.*)&quot;;"
            replace="repoVersion = &quot;@repository.version@&quot;;" />
        <replaceregexp
            file="${src}/me/gloriouseggroll/quorrabot/RepoVersion.java"
            match="nightlyBuild = &quot;(.*)&quot;;"
            replace="nightlyBuild = &quot;@nightly.build@&quot;;" />
        <replaceregexp
            file="${src}/me/gloriouseggroll/quorrabot/RepoVersion.java"
            match="quorraBotVersion = &quot;(.*)&quot;;"
            replace="quorraBotVersion = &quot;@quorrabot.version@&quot;;" />
    </target>

    <target depends="compile.src,post.compile,git.revision" name="jar">
        <jar destfile="${build.dir}/${ant.project.name}.jar">
            <fileset dir="${classes}" />
            <manifest>
                <attribute name="Bundle-Name" value="${ant.project.name}" />
                <attribute name="Bundle-Version" value="${version}" />
                <attribute name="Bundle-Revision" value="${git.revision}" />
                <attribute name="Bundle-Date" value="${NOW}" />
                <attribute name="Implementation-Title" value="${ant.project.name}" />
                <attribute name="Implementation-Version" value="${version}" />
                <attribute name="Implementation-Revision" value="${git.revision}" />
                <attribute name="Implementation-URL" value="http://www.quorrabot.com" />
                <attribute name="Class-Path" value="${mf.classpath}" />
                <attribute name="Main-Class" value="me.gloriouseggroll.quorrabot.Quorrabot" />
                <attribute name="Built-Date" value="${NOW}"/>
            </manifest>
        </jar>
        <mkdir dir="${lib.dir}" />
        <copy todir="${lib.dir}">
            <fileset dir="./lib" />
        </copy>
        <echo level="info" message="lib folder content was copied." />
        <copy todir="${res.dir}">
            <fileset dir="./res" />
        </copy>
        <echo level="info" message="res folder content was copied." />
        <copy todir="${versionfolder}">
            <fileset dir="${build.dir}" />
        </copy>
    </target>
     
    <target depends="compile.src.test,post.compile" name="test"></target>
     
    <target name="run" depends="jar">
        <java fork="true" classname="me.gloriouseggroll.quorrabot.QuorraBot" dir="${build.dir}">
            <classpath>
                <path refid="classpath" />
                <path location="${build.dir}/${ant.project.name}.jar" />
            </classpath>
        </java>
    </target>
     
    <target depends="jar" name="dist">
        <delete file="${dist}/${version.name}.zip" />
        <zip destfile="${dist}/${version.name}.zip" basedir="${dist}" update="false">
            <include name="${version.name}/**" />
        </zip>
    </target>

    <target name="clean" depends="git.revision,post.compile">
        <delete dir="${build}" />
    </target>

    <target name="distclean" depends="clean">
        <delete dir="${dist}" />
    </target>

</project>
